1.Logowanie
klient podaje pid i nick, tworzy kolejkę odbiorczą na podstawie pid
serwer dodaje użytkownika do listy aktywnych użytkowników oraz powiadamia użytkowników, że dołączył, odsyła użytkownikowi logującego się pakiet że się udało/nie udało
klient będzie czekał synchronicznie na pierwszy pakiet (ew można zrobić async z jakimś sleepem i po przekroczeniu timeout jakiś error), jak go otrzyma to przechodzi na komunikację asynchroniczną

pakiet logowania klienta / pakiet potwierdzenia serwera

2.rejestracja odbiorcy
klient w wysyła serwerowi w osobych paczkach informacje o zarejestrowanu się na każdy z tematów (czasowo lub na stałem, w przypadku pojawienia się informacji nowszej, nadpisuje starszą)
serwer przyjmuje pakiety, zapisuje informację po swojej stronie, powiadamia użytkowników z danego tematu, kto dołączył, ale nie zużywa to limitu wiadomości w danym temacie dla subskrypcji czasowych.

pakiet subskrybcji klienta / pakiet informacji o dołączeniu (dla dołączającego jest to potwierdzenie, że się udało)

3.rejestracja tematu
klient wysyła specjalną paczkę, żądanie utworzenia nowego tematu (wymagane jest tworzenie tematu jako osobny typ, aby móc zwrócić błąd w przypadku powtórzenia tematu)
serwer tworzy temat, zapisuje do niego twórcę tematu, wysyła do wszystkich informację o utworzeniu nowego tematu

pakiet utworzenia nowego tematu / (pakiet błędu stworzenia (dla tworzącego) / pakiet nowego tematu (dla wszystkich)) 

4.Rozgłosznie nowej wiadomości
klient wysyła pakiet z wiadomościa na dany temat, (nie wiem czy własne wiadomości powinny się zaliczać do limitu czasowej subskrypcji, trzeba to ustalić)
serwer przyjmuje pakiet, a następnie iteruje po użytkownikach obserwujących dany temat iwysyła do nich wiadomości, ew dekrementując ich liczbę czasowej subskrybcji

pakiet wiadomości klienta / pakiet wiadomości serwera 
nwm czy to to samo czy klient wysyła np z id, a serwer konwertuje dodając nick czy coć, ułatwia to cenzurę xd

5.


1.Napisać GUI (3 ekrany: logowanie, chatowanie, wybór tematów)
2.Napisać procedurę logowanie dla serwera i klienta, sprawdzenie unikalności id i nicku, umieszczenie w double linked liście użytkowników
Klienta Login(serverqueuename, id, nick)
Serwera IdExists(id), NickExists(nick)
3.Procedura zapisania się na temat jako klient, procedura sprawdzenia czy temat istnieje, procedura dodatnia odbiorcy do subskrybentów danego kanału
Klient Subscribe(topic ("string"))
Server TopicExists(topic), AddSubsriber(User, topic)
4.Procedura odsubskrybowania kanału, usunięcie z listy subskrybentów
Klient Unsubscribe(topic)
Sever RemoveSubscriber(User, topic)
5.Procedura utworzenia nowego kanału, zapisanie wnioskującego do niego, informacja jako server message czy się udało czy nie (zależy od implemetnacji gui)
Klient RequestTopicCreation(topic)
Server CreateTopic(topic ("string"))
6.Procedura wysłania wiadomości do serwera, procedura rozgłoszenia wiadomości do użytkowników, dekrementajca i ew usunięcie użytkownika o sub tymczasowej
Klient SendMessage(messageText)
Server BroadcastMessage(nick, messageText)
7.Procedura parsowania komend z tekstu wiadomości i ew. wysyłanie pakietu mutującego, procedura matchowania Id użytkownika z nickiem podanym w pakiecie 
mutującym oraz procedura sprawdzenia czy id figuruje w liście zmutowanych przez użytkownika użytkowników, informacja czy się udało czy nie jako wiadomość serwerowa,
 ale wysyłana tylko do niego
Klient ParseCommands(messageText) // jeżeli wykryje komendę, to się nią zajmie i zwróci np 1 albo -1, żeby zaznaczyć, że wiadomość została już handled
Klient FindUserIdByNick(nick)
Klient IdExists(id) //można zrobić reuse pod warunkiem, że zmutowani użytkownicy będą trzymani jako double linked lista wzkaźników do  tych użytkowników na serwerze (może być błąd jak nie oganriemy
wyjebania ich ze wszystkich list przy usuwaniu użytownika z serwera)